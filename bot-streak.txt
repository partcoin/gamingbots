/**** Streak Shortener ****

	Author:  Agatha#5815
	CoAuthor: thenanox#7870
    Started: 2018/11/03
    UpDated: 2018/11/17

	Live Demo: https://www.ethercrash.io/user/StreakShortener
	
    Calculator: https://docs.google.com/spreadsheets/d/1lSEUJIVEHXDRMB0Q5KSC4k-32x7vaNGd_Fjl6SAPzuQ
	
	Description: 

	
*/

var ScriptName = `Streak Shortener`;
var Version = `1.06`;


// Default settings
var BaseBet = 20; //Base Bet = 10 ethos
var CashOut = [1000, 900, 800, 700, 600, 500, 400, 300, 400, 500, 600, 700, 800, 900]; //CashOut 10.00x, then 9.00x 

// Auto Stops
var TargetProfit = 100 * BaseBet; //Stop the bot if Profits are larger than this (100 times BaseBet)
var StopLoss = 1000000; //Stop the bot if losses are larger than this.

//Remote Control
var AuthUser = "Kyliee "; //Authorized User to Remote Control
var Verbose = false; //Send RC responses to chat
var QuitProfit = false; //Quit on Profit on request

//*********************************************************************** */
var InitBalance = engine.getBalance();
var UserName = engine.getUsername();
var MinBalance = InitBalance;
var MaxBalance = InitBalance;
var CurrentGameID = -1;
var FirstGame = true;
var d = new Date();
var StartTime = d.getTime();
var CurrentBet = BaseBet;
var CurrentCashOut = CashOut[StreakCount];
var LastResult = "WON";
var StreakCount = 0;
var TotalLoss = 0;

// Stats
var numWins = 0;
var numLosses = 0;
var maxWinStreak = 0;
var maxLossStreak = 0;
var currentWinStreak = 0;
var currentLossStreak = 0;
var Profit = 0;
var ProfitPercent = 0;
var MaxBetPlaced = 0;


// Start of a game.
engine.on('game_starting', function (info) {
    CurrentGameID = info.game_id;

    // Stats
    var newdate = new Date();
    var timeplaying = ((newdate.getTime() - StartTime) / 1000) / 60;
    Profit = ((engine.getBalance() - InitBalance) / 100).toFixed(2);
    ProfitPercent = (((engine.getBalance() / InitBalance) - 1) * 100).toFixed(2)
    var CurrentBalance = engine.getBalance();

    console.clear()
    console.log("====== [", ScriptName, Version, "] ======");
    console.log("My username is:", UserName);
    console.log("Initial Balance:", (InitBalance / 100).toFixed(2), "ethos");
    console.log("Current Balance:", (CurrentBalance / 100).toFixed(2), "ethos");
    console.log(' Min: ' + (MinBalance / 100).toFixed(2) + ' ethos');
    console.log(' Max: ' + (MaxBalance / 100).toFixed(2) + ' ethos');
    console.log("====== Profit ======");
    console.log("Session profit:", Profit, "ethos (" + ProfitPercent + "%)");
    console.log("Target Profit:", TargetProfit, "ethos");
    console.log("====== Stats ======");
    console.log(" Wins:", numWins, "| Losses:", numLosses);
    console.log(" Win Streak:", maxWinStreak, " | Loss Streak:", maxLossStreak);
    console.log(" Tot. Games:", (numWins + numLosses), "in", Math.round(timeplaying), "minutes.");
    console.log('======  ======');
    console.log("Game #", CurrentGameID, "| Max Bet Placed:", MaxBetPlaced);

    if (LastResult == 'LOST' && !FirstGame) {

        TotalLoss = TotalLoss + CurrentBet;
        StreakCount++;
        if (StreakCount >= CashOut.length) { StreakCount = 0; }
        CurrentCashOut = CashOut[StreakCount] / 100;
        CurrentBet = Math.ceil(TotalLoss / (CurrentCashOut - 1) + BaseBet);
        console.log("Total Loss:", Math.ceil(TotalLoss), "ethos");

        // Stats
        numLosses++;
        currentLossStreak++;
        currentWinStreak = 0;
        maxLossStreak = (currentLossStreak > maxLossStreak) ? currentLossStreak : maxLossStreak;
    } else {
        CurrentBet = BaseBet;
        CurrentCashOut = CashOut[StreakCount] / 100;
    }
    //check if current bet is 0 or negative
    if (CurrentBet < 1) {
        CurrentBet = 1;
    }
    // First game is set to false.
    FirstGame = false;
    // Changing last result
    LastResult = "LOST";
    if ((InitBalance / 100) + Profit - CurrentBet < (InitBalance / 100) - StopLoss) {
        console.log("Current bet of", CurrentBet, "will break your stop loss on your balance", (InitBalance / 100) + Profit, ". Bot is shutting down...");
        console.log("You have made", Profit, "profit this session.");
        console.log("Profit percentage:", ProfitPercent + '%');
        engine.stop();
    } else {
        if (CurrentBet <= engine.getBalance()) { // Check if the balance is high enough to place the bet.
            console.log("Betting", CurrentBet, "ethos, CashOut", CurrentCashOut + 'x');
            console.log("Expected Profit", CurrentBet * CurrentCashOut - CurrentBet - TotalLoss, "ethos");
            engine.placeBet(Math.ceil(CurrentBet * 100), Math.ceil(CurrentCashOut * 100), false);
        } else { // Not enough balance to place the bet.
            console.error("Your account balance is to low to place a bet....", ScriptName, "will close now.");
            engine.stop();
        }
    }
});

engine.on('cashed_out', function (data) {
    if (data.username == UserName) {
        console.log("Successfully cashed out at", (data.stopped_at / 100) + 'x');
        LastResult = "WON";
        StreakCount = 0;
        TotalLoss = 0;
        
        // Stats
        numWins++;
        currentWinStreak++;
        currentLossStreak = 0;
        maxWinStreak = (currentWinStreak > maxWinStreak) ? currentWinStreak : maxWinStreak;
        
        Profit = ((engine.getBalance() - InitBalance) / 100).toFixed(2);
        ProfitPercent = (((engine.getBalance() / InitBalance) - 1) * 100).toFixed(2)
        
        //Target Profit Reched
        if (Profit > TargetProfit) {
            console.log("Target Profit reached, bot is shutting down...");
            console.log("You have made", Profit, "ethos (" + ProfitPercent + "%) profit this session.");
            engine.stop();
        }
        
        // Quit on Profit
        if (Profit > 0 && QuitProfit) {
            console.log('Quit on profit requested, bot is shutting down...');
            engine.chat('Quit on profit requested, bot is shutting down...');
            engine.stop();
        }
        
    }
});

engine.on('game_crash', function (data) {
    // Update Max & Min Balance Stats
    MinBalance = Math.min(engine.getBalance(), MinBalance);
    MaxBalance = Math.max(engine.getBalance(), MaxBalance);
    MaxBetPlaced = Math.max(CurrentBet, MaxBetPlaced);
    
    console.log("Game crashed at", (data.game_crash / 100) + 'x');
});


engine.on('msg', function (data) {
    var message = data.message;
    var sender = data.username;

    // #profit
    if (message == "#profit") {
        engine.chat("Your profit this session: " + Profit + " ethos (" + ProfitPercent + "%)");
    }

    // #Verbose <on|off>
    if (sender == UserName || sender == AuthUser) {
        if (message.indexOf('#verbose') > -1) {
            message = message.replace('#verbose ', '');
            if (message == "on") { Verbose = true; }
            if (message == "off") { Verbose = false; }
            engine.chat("Verbose mode set to " + message);
        }
    }

    // #basebet <xx.xx>
    if (sender == UserName || sender == AuthUser) {
        if (message.indexOf('#basebet') > -1) {
            message = message.replace('#basebet ', '');
            BaseBet = message;
            console.log("BaseBet changed to", message, "ethos");
            if (Verbose) {
                engine.chat("BaseBet changed to " + message + "ethos");
            }
        }
    }

    // #targetprofit <xx.xx>
    if (sender == UserName || sender == AuthUser) {
        if (message.indexOf('#targetprofit') > -1) {
            message = message.replace('#targetprofit ', '');
            TargetProfit = message;
            console.log("TargetProfit changed to", message, "ethos");
            if (Verbose) {
                engine.chat("TargetProfit changed to " + message + "ethos");
            }
        }
    }

    //Quit on Profit
    if ((sender == UserName || sender == AuthUser) && message == UserName + " quit on profit") {
        console.log('Quit on profit requested...');
        engine.chat('Quit on profit requested...');
        QuitProfit = true;
    }

    //Emergency Brakes
    if ((sender == UserName || sender == AuthUser) && message == "!kill") {
        console.log('Emergency Stop...');
        engine.chat('Emergency Stop...');
        engine.stop();
    }

});

